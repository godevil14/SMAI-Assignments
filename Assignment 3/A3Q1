{"cells":[{"cell_type":"markdown","source":["part 1: The MLP"],"metadata":{"id":"iDWzyvb8cQDu"}},{"metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","trusted":true,"id":"S1WiS7xscQDv","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1711048922927,"user_tz":-330,"elapsed":3893,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"acdeed5c-0088-452e-f2fb-e2cb8697c566"},"cell_type":"code","source":["# Input data files are available in the \"../input/\" directory.\n","# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n","!wget https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz#for getting model\n","# for dirname, _, filenames in os.walk('/kaggle/working'):\n","#     for filename in filenames:\n","#         print(os.path.join(dirname, filename))"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["--2024-03-21 19:21:58--  https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","Resolving www.cs.toronto.edu (www.cs.toronto.edu)... 128.100.3.30\n","Connecting to www.cs.toronto.edu (www.cs.toronto.edu)|128.100.3.30|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 170498071 (163M) [application/x-gzip]\n","Saving to: ‘cifar-10-python.tar.gz’\n","\n","cifar-10-python.tar 100%[===================>] 162.60M  53.0MB/s    in 3.2s    \n","\n","2024-03-21 19:22:02 (50.3 MB/s) - ‘cifar-10-python.tar.gz’ saved [170498071/170498071]\n","\n"]}]},{"cell_type":"code","source":["import tarfile\n","\n","# Path to CIFAR-10 dataset file\n","file_path = \"/content/cifar-10-python.tar.gz\"\n","\n","# Extract the dataset\n","with tarfile.open(file_path, \"r:gz\") as tar:\n","    tar.extractall()"],"metadata":{"id":"Hv1YDAced7SE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install tensorflow\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nsA6vH_hesuB","executionInfo":{"status":"ok","timestamp":1711049214011,"user_tz":-330,"elapsed":8186,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"636f68fa-b173-4733-bdd0-822707f903f6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tensorflow in /usr/local/lib/python3.10/dist-packages (2.15.0)\n","Requirement already satisfied: absl-py>=1.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.4.0)\n","Requirement already satisfied: astunparse>=1.6.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.6.3)\n","Requirement already satisfied: flatbuffers>=23.5.26 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.3.7)\n","Requirement already satisfied: gast!=0.5.0,!=0.5.1,!=0.5.2,>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.5.4)\n","Requirement already satisfied: google-pasta>=0.1.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: h5py>=2.9.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.9.0)\n","Requirement already satisfied: libclang>=13.0.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (16.0.6)\n","Requirement already satisfied: ml-dtypes~=0.2.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.2.0)\n","Requirement already satisfied: numpy<2.0.0,>=1.23.5 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.25.2)\n","Requirement already satisfied: opt-einsum>=2.3.2 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.3.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow) (24.0)\n","Requirement already satisfied: protobuf!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5,<5.0.0dev,>=3.20.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (3.20.3)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.10/dist-packages (from tensorflow) (67.7.2)\n","Requirement already satisfied: six>=1.12.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.16.0)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.4.0)\n","Requirement already satisfied: typing-extensions>=3.6.6 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (4.10.0)\n","Requirement already satisfied: wrapt<1.15,>=1.11.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.14.1)\n","Requirement already satisfied: tensorflow-io-gcs-filesystem>=0.23.1 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (0.36.0)\n","Requirement already satisfied: grpcio<2.0,>=1.24.3 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (1.62.1)\n","Requirement already satisfied: tensorboard<2.16,>=2.15 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.2)\n","Requirement already satisfied: tensorflow-estimator<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: keras<2.16,>=2.15.0 in /usr/local/lib/python3.10/dist-packages (from tensorflow) (2.15.0)\n","Requirement already satisfied: wheel<1.0,>=0.23.0 in /usr/local/lib/python3.10/dist-packages (from astunparse>=1.6.0->tensorflow) (0.43.0)\n","Requirement already satisfied: google-auth<3,>=1.6.3 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.27.0)\n","Requirement already satisfied: google-auth-oauthlib<2,>=0.5 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (1.2.0)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: requests<3,>=2.21.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (2.31.0)\n","Requirement already satisfied: tensorboard-data-server<0.8.0,>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (0.7.2)\n","Requirement already satisfied: werkzeug>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from tensorboard<2.16,>=2.15->tensorflow) (3.0.1)\n","Requirement already satisfied: cachetools<6.0,>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (5.3.3)\n","Requirement already satisfied: pyasn1-modules>=0.2.1 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.3.0)\n","Requirement already satisfied: rsa<5,>=3.1.4 in /usr/local/lib/python3.10/dist-packages (from google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (4.9)\n","Requirement already satisfied: requests-oauthlib>=0.7.0 in /usr/local/lib/python3.10/dist-packages (from google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (1.4.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (3.6)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests<3,>=2.21.0->tensorboard<2.16,>=2.15->tensorflow) (2024.2.2)\n","Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.10/dist-packages (from werkzeug>=1.0.1->tensorboard<2.16,>=2.15->tensorflow) (2.1.5)\n","Requirement already satisfied: pyasn1<0.6.0,>=0.4.6 in /usr/local/lib/python3.10/dist-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard<2.16,>=2.15->tensorflow) (0.5.1)\n","Requirement already satisfied: oauthlib>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<2,>=0.5->tensorboard<2.16,>=2.15->tensorflow) (3.2.2)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import tensorflow as tf\n","from tensorflow.keras import layers, models"],"metadata":{"id":"1UTzSOgTeM2l"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Load the CIFAR-10 dataset\n","(train_images, train_labels), (test_images, test_labels) = tf.keras.datasets.cifar10.load_data()\n","\n","# Normalize pixel values to be between 0 and 1\n","train_images, test_images = train_images / 255.0, test_images / 255.0"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yqwogNzJeq-W","executionInfo":{"status":"ok","timestamp":1711049291858,"user_tz":-330,"elapsed":8333,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"05533190-b079-48ee-a60e-d87256c405c2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz\n","170498071/170498071 [==============================] - 3s 0us/step\n"]}]},{"cell_type":"code","source":["# Train the model\n","model.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(test_images, test_labels))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hkZbINDIfFC8","executionInfo":{"status":"ok","timestamp":1711049492809,"user_tz":-330,"elapsed":189354,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"00d92360-3460-4011-a57b-4d4b9168110f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1563/1563 [==============================] - 17s 10ms/step - loss: 1.8829 - accuracy: 0.3249 - val_loss: 1.8022 - val_accuracy: 0.3422\n","Epoch 2/10\n","1563/1563 [==============================] - 15s 10ms/step - loss: 1.7158 - accuracy: 0.3843 - val_loss: 1.6826 - val_accuracy: 0.3925\n","Epoch 3/10\n","1563/1563 [==============================] - 18s 12ms/step - loss: 1.6400 - accuracy: 0.4119 - val_loss: 1.5795 - val_accuracy: 0.4400\n","Epoch 4/10\n","1563/1563 [==============================] - 19s 12ms/step - loss: 1.5993 - accuracy: 0.4270 - val_loss: 1.6162 - val_accuracy: 0.4203\n","Epoch 5/10\n","1563/1563 [==============================] - 17s 11ms/step - loss: 1.5656 - accuracy: 0.4380 - val_loss: 1.5692 - val_accuracy: 0.4448\n","Epoch 6/10\n","1563/1563 [==============================] - 24s 15ms/step - loss: 1.5409 - accuracy: 0.4480 - val_loss: 1.5780 - val_accuracy: 0.4321\n","Epoch 7/10\n","1563/1563 [==============================] - 18s 11ms/step - loss: 1.5237 - accuracy: 0.4539 - val_loss: 1.5229 - val_accuracy: 0.4583\n","Epoch 8/10\n","1563/1563 [==============================] - 18s 12ms/step - loss: 1.5014 - accuracy: 0.4614 - val_loss: 1.5899 - val_accuracy: 0.4432\n","Epoch 9/10\n","1563/1563 [==============================] - 19s 12ms/step - loss: 1.4856 - accuracy: 0.4653 - val_loss: 1.5252 - val_accuracy: 0.4515\n","Epoch 10/10\n","1563/1563 [==============================] - 19s 12ms/step - loss: 1.4802 - accuracy: 0.4687 - val_loss: 1.5369 - val_accuracy: 0.4532\n"]},{"output_type":"execute_result","data":{"text/plain":["<keras.src.callbacks.History at 0x7ad2d88a9cc0>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Evaluate the model\n","test_loss, test_acc = model.evaluate(test_images, test_labels)\n","print('Test accuracy:', test_acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yxtphVIgfcsj","executionInfo":{"status":"ok","timestamp":1711049498677,"user_tz":-330,"elapsed":2405,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"2bad03ee-96ee-42b2-c4bd-396c0c66aefc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 1s 4ms/step - loss: 1.5369 - accuracy: 0.4532\n","Test accuracy: 0.45320001244544983\n"]}]},{"cell_type":"code","source":["#my_code\n","model = models.Sequential([\n","    layers.Flatten(input_shape=(32, 32, 3)),\n","    layers.Dense(128, activation='relu'),\n","    layers.Dense(64, activation='relu'),\n","    layers.Dense(10, activation='softmax')# Min max non diff\n","])\n","\n","# Compiling\n","model.compile(optimizer='adam',\n","              loss='sparse_categorical_crossentropy',\n","              metrics=['accuracy'])\n","\n","# Training\n","model.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(test_images, test_labels))\n","\n","# Evaluation\n","test_loss, test_acc = model.evaluate(test_images, test_labels)\n","print('Test accuracy:', test_acc)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"d8TtCIf2gE3d","executionInfo":{"status":"ok","timestamp":1711049779273,"user_tz":-330,"elapsed":208112,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"9d22d8d4-7d49-4799-a90c-0e1027dedd50"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1563/1563 [==============================] - 21s 13ms/step - loss: 1.8736 - accuracy: 0.3255 - val_loss: 1.7102 - val_accuracy: 0.3926\n","Epoch 2/10\n","1563/1563 [==============================] - 18s 11ms/step - loss: 1.7009 - accuracy: 0.3921 - val_loss: 1.6338 - val_accuracy: 0.4215\n","Epoch 3/10\n","1563/1563 [==============================] - 18s 12ms/step - loss: 1.6355 - accuracy: 0.4164 - val_loss: 1.6195 - val_accuracy: 0.4195\n","Epoch 4/10\n","1563/1563 [==============================] - 22s 14ms/step - loss: 1.5915 - accuracy: 0.4321 - val_loss: 1.5881 - val_accuracy: 0.4334\n","Epoch 5/10\n","1563/1563 [==============================] - 27s 17ms/step - loss: 1.5588 - accuracy: 0.4453 - val_loss: 1.5859 - val_accuracy: 0.4335\n","Epoch 6/10\n","1563/1563 [==============================] - 18s 12ms/step - loss: 1.5420 - accuracy: 0.4497 - val_loss: 1.5304 - val_accuracy: 0.4571\n","Epoch 7/10\n","1563/1563 [==============================] - 17s 11ms/step - loss: 1.5150 - accuracy: 0.4596 - val_loss: 1.5305 - val_accuracy: 0.4501\n","Epoch 8/10\n","1563/1563 [==============================] - 18s 11ms/step - loss: 1.5018 - accuracy: 0.4651 - val_loss: 1.5159 - val_accuracy: 0.4613\n","Epoch 9/10\n","1563/1563 [==============================] - 17s 11ms/step - loss: 1.4831 - accuracy: 0.4696 - val_loss: 1.5144 - val_accuracy: 0.4594\n","Epoch 10/10\n","1563/1563 [==============================] - 17s 11ms/step - loss: 1.4724 - accuracy: 0.4745 - val_loss: 1.5087 - val_accuracy: 0.4699\n","313/313 [==============================] - 1s 4ms/step - loss: 1.5087 - accuracy: 0.4699\n","Test accuracy: 0.4699000120162964\n"]}]},{"cell_type":"markdown","source":["2. Convolutional Neural Network (CNN):\n","○ Design a simple Convolutional Neural Network (CNN) architecture with convolutional\n","layers, pooling layers, and fully connected layers.\n","○ Train the CNN model on the CIFAR-10 dataset.\n","○ Evaluate its performance on the test set using the same metrics as the MLP. Critically\n","compare CNN's performance to the MLP's.\n"],"metadata":{"id":"D3Nr8wbMcQDv"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras import layers, models\n","import matplotlib.pyplot as plt\n","# Define CNN architecture\n","model_cnn = models.Sequential([\n","    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)),# Formula for size after convolution (31,31,32)\n","    layers.MaxPooling2D((2, 2)),#(15,15,32)\n","    layers.Conv2D(64, (3, 3), activation='relu'),# (13,13,64)\n","    layers.MaxPooling2D((2, 2)),#(6,6,64)\n","    layers.Conv2D(64, (3, 3), activation='relu'),#(4,4,64)\n","    layers.Flatten(),\n","    layers.Dense(64, activation='relu'),\n","    layers.Dense(10, activation='softmax')\n","])\n","\n","# Compiling model\n","model_cnn.compile(optimizer='adam',\n","                  loss='sparse_categorical_crossentropy',\n","                  metrics=['accuracy'])\n","\n","# Training CNN\n","history_cnn = model_cnn.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(test_images, test_labels))\n","\n","# Final Evaluation CNN model\n","test_loss_cnn, test_acc_cnn = model_cnn.evaluate(test_images, test_labels)\n","print('CNN Test accuracy:', test_acc_cnn)\n","\n","# Visualization CNN training history\n","plt.plot(history_cnn.history['accuracy'], label='accuracy')\n","plt.plot(history_cnn.history['val_accuracy'], label = 'val_accuracy')\n","plt.xlabel('Epoch')\n","plt.ylabel('Accuracy')\n","plt.legend(loc='lower right')\n","plt.show()\n","\n","# Predictions for test set\n","predictions_cnn = np.argmax(model_cnn.predict(test_images), axis=-1)\n","\n","# Classification report and confusion matrix\n","# print(\"Classification Report for CNN:\")\n","# print(classification_report(test_labels, predictions_cnn))\n","\n","# print(\"Confusion Matrix for CNN:\")\n","# print(confusion_matrix(test_labels, predictions_cnn))\n","\n","# Compare CNN performance with MLP\n","print(\"Comparison of CNN and MLP:\")\n","print(\"CNN Test Accuracy:\", test_acc_cnn)\n","print(\"MLP Test Accuracy:\", test_acc)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"fZJHPd7vkEsm","executionInfo":{"status":"ok","timestamp":1711052217968,"user_tz":-330,"elapsed":761480,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"c5972572-d409-4b60-c5f2-0a05ed23e60c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/10\n","1563/1563 [==============================] - 86s 53ms/step - loss: 1.5286 - accuracy: 0.4417 - val_loss: 1.2493 - val_accuracy: 0.5577\n","Epoch 2/10\n","1563/1563 [==============================] - 73s 46ms/step - loss: 1.1713 - accuracy: 0.5853 - val_loss: 1.0722 - val_accuracy: 0.6191\n","Epoch 3/10\n","1563/1563 [==============================] - 72s 46ms/step - loss: 1.0215 - accuracy: 0.6403 - val_loss: 1.0433 - val_accuracy: 0.6336\n","Epoch 4/10\n","1563/1563 [==============================] - 70s 45ms/step - loss: 0.9274 - accuracy: 0.6742 - val_loss: 1.0396 - val_accuracy: 0.6400\n","Epoch 5/10\n","1563/1563 [==============================] - 75s 48ms/step - loss: 0.8616 - accuracy: 0.6979 - val_loss: 0.9408 - val_accuracy: 0.6706\n","Epoch 6/10\n","1563/1563 [==============================] - 70s 45ms/step - loss: 0.8029 - accuracy: 0.7187 - val_loss: 0.8703 - val_accuracy: 0.6974\n","Epoch 7/10\n","1563/1563 [==============================] - 76s 48ms/step - loss: 0.7542 - accuracy: 0.7340 - val_loss: 0.8661 - val_accuracy: 0.7032\n","Epoch 8/10\n","1563/1563 [==============================] - 71s 46ms/step - loss: 0.7195 - accuracy: 0.7470 - val_loss: 0.8435 - val_accuracy: 0.7091\n","Epoch 9/10\n","1563/1563 [==============================] - 70s 45ms/step - loss: 0.6730 - accuracy: 0.7635 - val_loss: 0.8588 - val_accuracy: 0.7116\n","Epoch 10/10\n","1563/1563 [==============================] - 71s 45ms/step - loss: 0.6393 - accuracy: 0.7755 - val_loss: 0.9165 - val_accuracy: 0.6899\n","313/313 [==============================] - 4s 13ms/step - loss: 0.9165 - accuracy: 0.6899\n","CNN Test accuracy: 0.6898999810218811\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 4s 12ms/step\n","Classification Report for CNN:\n","              precision    recall  f1-score   support\n","\n","           0       0.75      0.70      0.72      1000\n","           1       0.74      0.87      0.80      1000\n","           2       0.45      0.74      0.56      1000\n","           3       0.53      0.54      0.53      1000\n","           4       0.65      0.59      0.62      1000\n","           5       0.73      0.49      0.59      1000\n","           6       0.80      0.76      0.78      1000\n","           7       0.80      0.71      0.75      1000\n","           8       0.76      0.86      0.81      1000\n","           9       0.90      0.65      0.75      1000\n","\n","    accuracy                           0.69     10000\n","   macro avg       0.71      0.69      0.69     10000\n","weighted avg       0.71      0.69      0.69     10000\n","\n","Confusion Matrix for CNN:\n","[[699  37 114  13  20   3   7   7  86  14]\n"," [ 14 873  26   7   4   1   7   1  38  29]\n"," [ 50   6 738  56  47  29  34  19  19   2]\n"," [ 15  11 161 538  60  82  69  30  23  11]\n"," [ 23   5 213  59 586  13  37  50  10   4]\n"," [ 19  12 130 211  56 490  20  50   8   4]\n"," [  2  11 102  59  34  11 755   8  18   0]\n"," [ 23   8  79  42  79  33  11 713   6   6]\n"," [ 52  20  31  17   5   4   3   3 859   6]\n"," [ 32 191  32  14   4   4   4  15  56 648]]\n","Comparison of CNN and MLP:\n","CNN Test Accuracy: 0.6898999810218811\n","MLP Test Accuracy: 0.4699000120162964\n"]}]},{"cell_type":"markdown","source":["3. Using **vgg model**"],"metadata":{"id":"7uARMT2lquya"}},{"cell_type":"code","source":["import tensorflow as tf\n","from tensorflow.keras.applications import VGG16\n","from tensorflow.keras import layers, models\n","\n","# Load pre-trained VGG model without top layers (include_top=False)\n","vgg_base = VGG16(weights='imagenet', include_top=False, input_shape=(32, 32, 3))\n","\n","# Freeze the pre-trained layers\n","vgg_base.trainable = False\n","\n","# Add custom fully connected layers on top of the VGG base\n","model_vgg = models.Sequential([\n","    vgg_base,\n","    layers.Flatten(),\n","    layers.Dense(256, activation='relu'),\n","    layers.Dropout(0.5),\n","    layers.Dense(10, activation='softmax')\n","])\n","\n","# Compile the model\n","model_vgg.compile(optimizer='adam',\n","                  loss='sparse_categorical_crossentropy',\n","                  metrics=['accuracy'])\n","\n","# Train the model\n","history_vgg = model_vgg.fit(train_images, train_labels, epochs=10, batch_size=32, validation_data=(test_images, test_labels))\n","\n","# Evaluate the model\n","test_loss_vgg, test_acc_vgg = model_vgg.evaluate(test_images, test_labels)\n","print('VGG Test accuracy:', test_acc_vgg)\n","\n","# Analyze benefits of transfer learning compared to MLP and CNN\n","print(\"Comparison of Transfer Learning (VGG) with MLP and CNN:\")\n","print(\"VGG Test Accuracy:\", test_acc_vgg)\n","print(\"CNN Test Accuracy:\", test_acc_cnn)\n","print(\"MLP Test Accuracy:\", test_acc)\n","\n","# Optionally, fine-tuning the model"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AkTElmG_pLV4","executionInfo":{"status":"ok","timestamp":1711060270389,"user_tz":-330,"elapsed":199679,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"6fb19d92-4779-4e63-8b52-1c669ba467ce"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading data from https://storage.googleapis.com/tensorflow/keras-applications/vgg16/vgg16_weights_tf_dim_ordering_tf_kernels_notop.h5\n","58889256/58889256 [==============================] - 0s 0us/step\n","Epoch 1/10\n","1563/1563 [==============================] - 790s 505ms/step - loss: 1.4921 - accuracy: 0.4760 - val_loss: 1.2970 - val_accuracy: 0.5486\n","Epoch 2/10\n","1563/1563 [==============================] - 774s 495ms/step - loss: 1.2986 - accuracy: 0.5453 - val_loss: 1.2161 - val_accuracy: 0.5751\n","Epoch 3/10\n","1563/1563 [==============================] - 769s 492ms/step - loss: 1.2465 - accuracy: 0.5644 - val_loss: 1.1796 - val_accuracy: 0.5852\n","Epoch 4/10\n","1563/1563 [==============================] - 774s 495ms/step - loss: 1.2095 - accuracy: 0.5789 - val_loss: 1.1717 - val_accuracy: 0.5843\n","Epoch 5/10\n","1563/1563 [==============================] - 764s 489ms/step - loss: 1.1876 - accuracy: 0.5835 - val_loss: 1.1517 - val_accuracy: 0.5941\n","Epoch 6/10\n","1563/1563 [==============================] - 753s 482ms/step - loss: 1.1659 - accuracy: 0.5942 - val_loss: 1.1507 - val_accuracy: 0.5939\n","Epoch 7/10\n","1563/1563 [==============================] - 777s 497ms/step - loss: 1.1465 - accuracy: 0.5967 - val_loss: 1.1331 - val_accuracy: 0.6037\n","Epoch 8/10\n","1563/1563 [==============================] - 756s 484ms/step - loss: 1.1372 - accuracy: 0.6027 - val_loss: 1.1246 - val_accuracy: 0.6050\n","Epoch 9/10\n","1563/1563 [==============================] - 765s 489ms/step - loss: 1.1199 - accuracy: 0.6099 - val_loss: 1.1348 - val_accuracy: 0.6028\n","Epoch 10/10\n","1563/1563 [==============================] - 762s 488ms/step - loss: 1.1087 - accuracy: 0.6122 - val_loss: 1.1153 - val_accuracy: 0.6056\n","313/313 [==============================] - 124s 396ms/step - loss: 1.1153 - accuracy: 0.6056\n","VGG Test accuracy: 0.6055999994277954\n","Comparison of Transfer Learning (VGG) with MLP and CNN:\n","VGG Test Accuracy: 0.6055999994277954\n","CNN Test Accuracy: 0.6898999810218811\n","MLP Test Accuracy: 0.4699000120162964\n"]}]},{"cell_type":"markdown","source":["Final Task: Comparision between all"],"metadata":{"id":"411zGa-PsgC7"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Define model names and corresponding test accuracy and loss\n","models = ['MLP', 'CNN', 'VGG']\n","test_accuracy = [test_acc, test_acc_cnn, test_acc_vgg]\n","test_loss = [test_loss, test_loss_cnn, test_loss_vgg]\n","\n","# Plot test set accuracy comparison\n","plt.figure(figsize=(10, 6))\n","plt.bar(models, test_accuracy, color=['blue', 'orange', 'green'])\n","plt.title('Test Set Accuracy Comparison')\n","plt.xlabel('Model')\n","plt.ylabel('Accuracy')\n","for i in range(len(models)):\n","    plt.text(models[i], test_accuracy[i] + 0.01, str(round(test_accuracy[i], 4)), ha='center')\n","plt.ylim(0, 1)\n","plt.grid(axis='y')\n","plt.show()\n","\n","# Plot test set loss comparison\n","plt.figure(figsize=(10, 6))\n","plt.bar(models, test_loss, color=['blue', 'orange', 'green'])\n","plt.title('Test Set Loss Comparison')\n","plt.xlabel('Model')\n","plt.ylabel('Loss')\n","for i in range(len(models)):\n","    plt.text(models[i], test_loss[i] + 0.01, str(round(test_loss[i], 4)), ha='center')\n","plt.ylim(0, max(test_loss) * 1.1)\n","plt.grid(axis='y')\n","plt.show()\n","\n","# Discuss the reasons behind differences in performance\n","print(\"Reasons Behind Differences in Performance:\")\n","print(\"- CNNs leverage spatial structure through convolutional layers to capture local patterns and hierarchies of features.\")\n","print(\"- MLPs treat images as flat vectors, ignoring spatial relationships, which limits their ability to extract meaningful features from images.\")\n","print(\"- VGG-based models combine the advantages of CNNs with the pre-trained weights from a large dataset like ImageNet, allowing for better generalization and feature extraction.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"Sj6lm31Qlf_a","executionInfo":{"status":"ok","timestamp":1711060435356,"user_tz":-330,"elapsed":1465,"user":{"displayName":"Adarsh","userId":"02186010285981268968"}},"outputId":"39ebf72f-f2ea-4bb4-b14a-aa38d90afd13"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Reasons Behind Differences in Performance:\n","- CNNs leverage spatial structure through convolutional layers to capture local patterns and hierarchies of features.\n","- MLPs treat images as flat vectors, ignoring spatial relationships, which limits their ability to extract meaningful features from images.\n","- VGG-based models combine the advantages of CNNs with the pre-trained weights from a large dataset like ImageNet, allowing for better generalization and feature extraction.\n"]}]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/cifar-10-simple-cnn-with-cutmix-using-pytorch-5713f1f1-3617-405f-88b5-baf745b94916.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20240321/auto/storage/goog4_request&X-Goog-Date=20240321T191554Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=57d0913bc55ea529b94bbb91d800aa13a478eb77c461f515ac506c5c859131d26d3f928ae035f9a6b45ebf5562f0ec6b1e6c98a9e6ee894febe27fbf8fea1902710069ddff25dc1098b60da0444a0753f318eff42d6b8874318d8f49773a91699ebefec56b594118495ac06e0acae3b2959750e841e332c17a70d7294bd64f65c6efb4f75bbd1c7046716f3cc89454c232abb89207637dd7def8943b154b3f66509a8ed8bf9b51e95d427ba3a64ab84de3f36a877e13361fdec9f302895bf0c255f1481d32a0ccf61fc459219b7ab7c44bead2a8fc7dab4b0b31ba28d5fc7d968d3f242f9c698c359ff3c0f477bdfeb8bca108d007031f2954024c3aa3ace50e","timestamp":1711048664573}],"gpuType":"T4"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}